[
    {
        "generated_fol_premises": "∀x (DrinkRegularly(x, coffee) → IsDependentOn(x, caffeine))\n∀x (DrinkRegularly(x, coffee)  ∨ (¬WantToBeAddictedTo(x, caffeine)))\n∀x (¬WantToBeAddictedTo(x, caffeine) → ¬AwareThatDrug(x, caffeine))\n¬(Student(rina) ⊕  ¬AwareThatDrug(rina, caffeine))\n¬(IsDependentOn(rina, caffeine) ⊕ Student(rina))",
        "fol_context": "∀x (DrinkRegularly(x, coffee) → IsDependentOn(x, caffeine))\n∀x (DrinkRegularly(x, coffee)  ∨ (¬WantToBeAddictedTo(x, caffeine)))\n∀x (¬WantToBeAddictedTo(x, caffeine) → ¬AwareThatDrug(x, caffeine))\n¬(Student(rina) ⊕  ¬AwareThatDrug(rina, caffeine))\n¬(IsDependentOn(rina, caffeine) ⊕ Student(rina))",
        "generated_fol_conclusion": "(¬WantToBeAddictedTo(rina, caffeine) ∨ ¬AwareThatDrug(rina, caffeine))",
        "gold_conclusion": "¬WantToBeAddictedTo(rina, caffeine) ∨ (¬AwareThatDrug(rina, caffeine))",
        "gold_answer": "True",
        "example_id": 1126,
        "nl_context": "All people who regularly drink coffee are dependent on caffeine.\nPeople regularly drink coffee, or they don't want to be addicted to caffeine, or both.\nNo one who doesn't want to be addicted to caffeine is unaware that caffeine is a drug.\nRina is either a student who is unaware that caffeine is a drug, or she is not a student and is she aware that caffeine is a drug.\nRina  is either a student who is dependent on caffeine, or she is not a student and not dependent on caffeine.",
        "nl_question": "Rina doesn't want to be addicted to caffeine or is unaware that caffeine is a drug.",
        "context_id": 406,
        "prover_answer": "True",
        "prover_status": "",
        "prover_error": "",
        "is_correct": true
    },
    {
        "generated_fol_premises": "∀x (DrinkRegularly(x, coffee) → IsDependentOn(x, caffeine))\n∀x (DrinkRegularly(x, coffee)  ∨ (¬WantToBeAddictedTo(x, caffeine)))\n∀x (¬WantToBeAddictedTo(x, caffeine) → ¬AwareThatDrug(x, caffeine))\n¬(Student(rina) ⊕  ¬AwareThatDrug(rina, caffeine))\n¬(IsDependentOn(rina, caffeine) ⊕ Student(rina))",
        "fol_context": "∀x (DrinkRegularly(x, coffee) → IsDependentOn(x, caffeine))\n∀x (DrinkRegularly(x, coffee)  ∨ (¬WantToBeAddictedTo(x, caffeine)))\n∀x (¬WantToBeAddictedTo(x, caffeine) → ¬AwareThatDrug(x, caffeine))\n¬(Student(rina) ⊕  ¬AwareThatDrug(rina, caffeine))\n¬(IsDependentOn(rina, caffeine) ⊕ Student(rina))",
        "generated_fol_conclusion": "¬WantToBeAddictedTo(rina, caffeine) ∨ IsUnawareThatCaffeineIsADrug(rina)",
        "gold_conclusion": "¬WantToBeAddictedTo(rina, caffeine) ⊕ ¬AwareThatDrug(rina, caffeine)",
        "gold_answer": "True",
        "example_id": 1127,
        "nl_context": "All people who regularly drink coffee are dependent on caffeine.\nPeople regularly drink coffee, or they don't want to be addicted to caffeine, or both.\nNo one who doesn't want to be addicted to caffeine is unaware that caffeine is a drug.\nRina is either a student who is unaware that caffeine is a drug, or she is not a student and is she aware that caffeine is a drug.\nRina  is either a student who is dependent on caffeine, or she is not a student and not dependent on caffeine.",
        "nl_question": "Rina eith doesn't want to be addicted to caffeine or is unaware that caffeine is a drug.",
        "context_id": 406,
        "prover_answer": "Uncertain",
        "prover_status": "",
        "prover_error": "",
        "is_correct": false
    },
    {
        "generated_fol_premises": "∀x (DrinkRegularly(x, coffee) → IsDependentOn(x, caffeine))\n∀x (DrinkRegularly(x, coffee)  ∨ (¬WantToBeAddictedTo(x, caffeine)))\n∀x (¬WantToBeAddictedTo(x, caffeine) → ¬AwareThatDrug(x, caffeine))\n¬(Student(rina) ⊕  ¬AwareThatDrug(rina, caffeine))\n¬(IsDependentOn(rina, caffeine) ⊕ Student(rina))",
        "fol_context": "∀x (DrinkRegularly(x, coffee) → IsDependentOn(x, caffeine))\n∀x (DrinkRegularly(x, coffee)  ∨ (¬WantToBeAddictedTo(x, caffeine)))\n∀x (¬WantToBeAddictedTo(x, caffeine) → ¬AwareThatDrug(x, caffeine))\n¬(Student(rina) ⊕  ¬AwareThatDrug(rina, caffeine))\n¬(IsDependentOn(rina, caffeine) ⊕ Student(rina))",
        "generated_fol_conclusion": "DrinkRegularly(rina, coffee) ∨ IsUnawareThatCaffeineIsADrug(rina)",
        "gold_conclusion": "DrinkRegularly(rina, coffee)  ⊕ IsUnawareThatCaffeineIsADrug(rina)",
        "gold_answer": "False",
        "example_id": 1128,
        "nl_context": "All people who regularly drink coffee are dependent on caffeine.\nPeople regularly drink coffee, or they don't want to be addicted to caffeine, or both.\nNo one who doesn't want to be addicted to caffeine is unaware that caffeine is a drug.\nRina is either a student who is unaware that caffeine is a drug, or she is not a student and is she aware that caffeine is a drug.\nRina  is either a student who is dependent on caffeine, or she is not a student and not dependent on caffeine.",
        "nl_question": "Rina either regularly drinks coffee or is unaware that caffeine is a drug.",
        "context_id": 406,
        "prover_answer": "Uncertain",
        "prover_status": "",
        "prover_error": "",
        "is_correct": false
    },
    {
        "generated_fol_premises": "∀x (DrinkRegularly(x, coffee) → IsDependentOn(x, caffeine))\n∀x (DrinkRegularly(x, coffee)  ∨ (¬WantToBeAddictedTo(x, caffeine)))\n∀x (¬WantToBeAddictedTo(x, caffeine) → ¬AwareThatDrug(x, caffeine))\n¬(Student(rina) ⊕  ¬AwareThatDrug(rina, caffeine))\n¬(IsDependentOn(rina, caffeine) ⊕ Student(rina))",
        "fol_context": "∀x (DrinkRegularly(x, coffee) → IsDependentOn(x, caffeine))\n∀x (DrinkRegularly(x, coffee)  ∨ (¬WantToBeAddictedTo(x, caffeine)))\n∀x (¬WantToBeAddictedTo(x, caffeine) → ¬AwareThatDrug(x, caffeine))\n¬(Student(rina) ⊕  ¬AwareThatDrug(rina, caffeine))\n¬(IsDependentOn(rina, caffeine) ⊕ Student(rina))",
        "generated_fol_conclusion": "(¬WantToBeAddictedTo(rina, caffeine) ∧ ¬AwareThatDrug(rina, caffeine)) ⊃ ¬WantToBeAddictedTo(rina, caffeine) ∧ DrinkRegularly(rina, coffee)",
        "gold_conclusion": "(DoNotWantToBeAddictedToCaffeine(rina) ⊕ ¬AwareThatDrug(rina, caffeine)) → ¬(¬WantToBeAddictedTo(rina, caffeine) ∧ DrinkRegularly(rina, coffee))",
        "gold_answer": "True",
        "example_id": 1129,
        "nl_context": "All people who regularly drink coffee are dependent on caffeine.\nPeople regularly drink coffee, or they don't want to be addicted to caffeine, or both.\nNo one who doesn't want to be addicted to caffeine is unaware that caffeine is a drug.\nRina is either a student who is unaware that caffeine is a drug, or she is not a student and is she aware that caffeine is a drug.\nRina  is either a student who is dependent on caffeine, or she is not a student and not dependent on caffeine.",
        "nl_question": "If Rina either doesn't want to be addicted to caffeine and is unaware that caffeine is a drug, or neither doesn't want to be addicted to caffeine nor is unaware that caffeine is a drug, then Rina doesn't want to be addicted to caffeine and regularly drinks coffee.",
        "context_id": 406,
        "prover_answer": null,
        "prover_status": "parsing error",
        "prover_error": "",
        "is_correct": false
    },
    {
        "generated_fol_premises": "∀x (ChoralConductor(x) → Musician(x))\n∃x (Musician(x) ∧ Love(x, music))\n∃x (Musician(x) ∧ Love(x, music))\n∃x (ChoralConductor(x) ∧ Published(x, \"Method of Studying Gregorian Chant\", 1946))",
        "fol_context": "Czech(miroslav) ∧ ChoralConductor(miroslav) ∧ SpecializeInPerformanceOf(miroslav, renaissanceMusic) ∧ SpecializeInPerformanceOf(miroslav, baroqueMusic)\n∀x (ChoralConductor(x) → Musician(x))\n∃x ∃y ((Musician(x) → Love(x, music)) ∧ (¬(x=y) ∧ Musician(y) → Love(y, music)))\nPublishedBook(miroslav, methodOfStudyingGregorianChant, yr1946)",
        "generated_fol_conclusion": "Love(miroslav_venhoda, music)",
        "gold_conclusion": "Love(miroslav, music)",
        "gold_answer": "Uncertain",
        "example_id": 20,
        "nl_context": "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.\nAny choral conductor is a musician.\nSome musicians love music.\nMiroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant.",
        "nl_question": "Miroslav Venhoda loved music.",
        "context_id": 8,
        "prover_answer": "Uncertain",
        "prover_status": "",
        "prover_error": "",
        "is_correct": true
    },
    {
        "generated_fol_premises": "∀x (ChoralConductor(x) → Musician(x))\n∃x (Musician(x) ∧ Love(x, music))\n∃x (ChoralConductor(x) ∧ PublishedBook(x, 1946, Method of Studying Gregorian Chant))\n∃x (Czech(x) ∧ ChoralConductor(x))",
        "fol_context": "Czech(miroslav) ∧ ChoralConductor(miroslav) ∧ SpecializeInPerformanceOf(miroslav, renaissanceMusic) ∧ SpecializeInPerformanceOf(miroslav, baroqueMusic)\n∀x (ChoralConductor(x) → Musician(x))\n∃x ∃y ((Musician(x) → Love(x, music)) ∧ (¬(x=y) ∧ Musician(y) → Love(y, music)))\nPublishedBook(miroslav, methodOfStudyingGregorianChant, yr1946)",
        "generated_fol_conclusion": "∃x (Czech(x) ∧ PublishedBook(x, 1946, Method of Studying Gregorian Chant))",
        "gold_conclusion": "∃x ∃y (Czech(x) ∧ PublishedBook(x, y, year1946))",
        "gold_answer": "True",
        "example_id": 21,
        "nl_context": "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.\nAny choral conductor is a musician.\nSome musicians love music.\nMiroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant.",
        "nl_question": "A Czech published a book in 1946.",
        "context_id": 8,
        "prover_answer": "Uncertain",
        "prover_status": "",
        "prover_error": "",
        "is_correct": false
    },
    {
        "generated_fol_premises": "∃x (ChoralConductor(x) ∧ SpecializedIn(x, RenaissanceAndBaroqueMusic))\n∀x (ChoralConductor(x) → Musician(x))\n∃x (Musician(x) ∧ LovesMusic(x))\n∃x (PublishedBook(x, \"Method of Studying Gregorian Chant\") ∧ YearOfPublication(x, 1946) ∧ x = MiroslavVenhoda)",
        "fol_context": "Czech(miroslav) ∧ ChoralConductor(miroslav) ∧ SpecializeInPerformanceOf(miroslav, renaissanceMusic) ∧ SpecializeInPerformanceOf(miroslav, baroqueMusic)\n∀x (ChoralConductor(x) → Musician(x))\n∃x ∃y ((Musician(x) → Love(x, music)) ∧ (¬(x=y) ∧ Musician(y) → Love(y, music)))\nPublishedBook(miroslav, methodOfStudyingGregorianChant, yr1946)",
        "generated_fol_conclusion": "¬∃x (ChoralConductor(x) ∧ SpecializedIn(x, RenaissanceAndBaroqueMusic))",
        "gold_conclusion": "∀x (ChoralConductor(x) → ¬SpecializeInPerformanceOf(x, renaissanceMusic))",
        "gold_answer": "False",
        "example_id": 22,
        "nl_context": "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.\nAny choral conductor is a musician.\nSome musicians love music.\nMiroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant.",
        "nl_question": "No choral conductor specialized in the performance of Renaissance.",
        "context_id": 8,
        "prover_answer": null,
        "prover_status": "parsing error",
        "prover_error": "",
        "is_correct": false
    },
    {
        "generated_fol_premises": "∀x (IsEel(x) → IsFish(x))\n∀x (IsFish(x) → ¬IsPlant(x))\n∀x (IsDisplayedIn(x, collection) → (IsPlant(x) ∨ IsAnimal(x)))\n∀x (IsMulticellularAnimal(x) → ¬IsBacteria(x))\n∀x (IsDisplayedIn(x, collection) → IsMulticellularAnimal(x))\nIsDisplayedIn(sea_eel, collection)\nIsEel(sea_eel) ∨ IsAnimal(sea_eel) ∨ ¬IsPlant(sea_eel)",
        "fol_context": "∀x (Eel(x) → Fish(x))\n∀x (Fish(x) → ¬Plant(x))\n∀x (DisplayedIn(x, collection) → Plant(x) ⊕ Animal(x))\n∀x (Multicellular(x) → ¬Bacteria(x))\n∀x (DisplayedIn(x, collection) ∧ Animal(x) → Multicellular(x))\nDisplayedIn(seaEel, collection)\nEel(seaEel) ∨ Animal(seaEel) ∨ ¬Plant(seaEel)",
        "generated_fol_conclusion": "IsEel(sea_eel)",
        "gold_conclusion": "Eel(seaEel)",
        "gold_answer": "Uncertain",
        "example_id": 1336,
        "nl_context": "All eels are fish. \nNo fish are plants. \nEverything displayed in the collection is either a plant or an animal.\nAll multicellular animals are not bacteria.\nAll animals displayed in the collection are multicellular.\nA sea eel is displayed in the collection.\nThe sea eel is an eel or an animal or not a plant.",
        "nl_question": "The sea eel is an eel.",
        "context_id": 463,
        "prover_answer": "Uncertain",
        "prover_status": "",
        "prover_error": "",
        "is_correct": true
    },
    {
        "generated_fol_premises": "∀x (Eel(x) → Fish(x))\n∀x (Fish(x) → ¬Plant(x))\n∀x (InCollection(x) → (Plant(x) ∨ Animal(x)))\n∀x (MulticellularAnimal(x) → ¬Bacteria(x))\n∀x (InCollection(x) → MulticellularAnimal(x))\nInCollection(sea_eel)\nAnimalOrEelOrNotPlant(sea_eel)",
        "fol_context": "∀x (Eel(x) → Fish(x))\n∀x (Fish(x) → ¬Plant(x))\n∀x (DisplayedIn(x, collection) → Plant(x) ⊕ Animal(x))\n∀x (Multicellular(x) → ¬Bacteria(x))\n∀x (DisplayedIn(x, collection) ∧ Animal(x) → Multicellular(x))\nDisplayedIn(seaEel, collection)\nEel(seaEel) ∨ Animal(seaEel) ∨ ¬Plant(seaEel)",
        "generated_fol_conclusion": "Bacteria(sea_eel)",
        "gold_conclusion": "Bacteria(seaEel)",
        "gold_answer": "False",
        "example_id": 1337,
        "nl_context": "All eels are fish. \nNo fish are plants. \nEverything displayed in the collection is either a plant or an animal.\nAll multicellular animals are not bacteria.\nAll animals displayed in the collection are multicellular.\nA sea eel is displayed in the collection.\nThe sea eel is an eel or an animal or not a plant.",
        "nl_question": "The sea eel is bacteria.",
        "context_id": 463,
        "prover_answer": "False",
        "prover_status": "",
        "prover_error": "",
        "is_correct": true
    },
    {
        "generated_fol_premises": "∀x (Eel(x) → Fish(x))\n∀x (Fish(x) → ¬Plant(x))\n∀x (InCollection(x) → Plant(x) ∨ Animal(x))\n∀x (MulticellularAnimal(x) → ¬Bacteria(x))\n∀x (InCollection(x) → MulticellularAnimal(x))\nInCollection(seaEel)\nSeaEelIsEitherEelOrAnimalOrNotPlant(SeaEel)",
        "fol_context": "∀x (Eel(x) → Fish(x))\n∀x (Fish(x) → ¬Plant(x))\n∀x (DisplayedIn(x, collection) → Plant(x) ⊕ Animal(x))\n∀x (Multicellular(x) → ¬Bacteria(x))\n∀x (DisplayedIn(x, collection) ∧ Animal(x) → Multicellular(x))\nDisplayedIn(seaEel, collection)\nEel(seaEel) ∨ Animal(seaEel) ∨ ¬Plant(seaEel)",
        "generated_fol_conclusion": "MulticellularAnimal(seaEel) ∨ Bacteria(seaEel)",
        "gold_conclusion": "Multicellular(seaEel) ∨ Bacteria(seaEel)",
        "gold_answer": "True",
        "example_id": 1338,
        "nl_context": "All eels are fish. \nNo fish are plants. \nEverything displayed in the collection is either a plant or an animal.\nAll multicellular animals are not bacteria.\nAll animals displayed in the collection are multicellular.\nA sea eel is displayed in the collection.\nThe sea eel is an eel or an animal or not a plant.",
        "nl_question": "The sea eel is multicellular or is bacteria.",
        "context_id": 463,
        "prover_answer": "True",
        "prover_status": "",
        "prover_error": "",
        "is_correct": true
    }
]